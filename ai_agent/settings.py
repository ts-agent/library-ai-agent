"""
Django settings for ai_agent project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from google.cloud.sql.connector import Connector
from sqlalchemy.sql import text
from sqlalchemy.engine import URL
from sqlalchemy.pool import QueuePool
from sqlalchemy import create_engine
from google.oauth2 import service_account
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-dj%$r4@y-xfk=vb7x5lzk1va6%$u#+a@e+wj2hl3%mv*fqz5za')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # 임시로 디버그 모드 활성화

ALLOWED_HOSTS = [
    'library-ai-agent-kr.du.r.appspot.com',
    'localhost',
    '127.0.0.1',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'data_analysis.apps.DataAnalysisConfig',
    'crispy_forms',
    'crispy_bootstrap5',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files for production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ai_agent.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'data_analysis.context_processors.sidebar_context',
            ],
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_agent.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 환경 변수에서 데이터베이스 설정 가져오기
DB_HOST = os.environ.get('DB_HOST', '/cloudsql/library-ai-agent-kr:asia-northeast3:library-ai-db')
DB_NAME = os.environ.get('DB_NAME', 'library_ai_db')
DB_USER = os.environ.get('DB_USER', 'postgres')
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'Library@AI2025!')

if os.getenv('GAE_ENV', '').startswith('standard'):
    # App Engine 환경
    # Cloud SQL Python Connector 객체 생성
    connector = Connector()

    def getconn():
        """Cloud SQL Python Connector를 사용하여 데이터베이스 연결을 생성합니다."""
        conn = connector.connect(
            "library-ai-agent-kr:asia-northeast3:library-ai-db",
            "pg8000",
            user=DB_USER,
            password=DB_PASSWORD,
            db=DB_NAME,
        )
        return conn

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': None,
            'OPTIONS': {
                'isolation_level': 2,
            },
        }
    }
else:
    # 로컬 개발 환경
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'library_ai_db',
            'USER': 'postgres',
            'PASSWORD': 'Library@AI2025!',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATICFILES_DIRS = [
    BASE_DIR / 'data_analysis' / 'static',
]

if os.getenv('GAE_ENV', '').startswith('standard'):
    # App Engine 환경
    GS_BUCKET_NAME = 'library-ai-agent-storage'
    GS_PROJECT_ID = 'library-ai-agent-kr'
    
    # App Engine의 기본 서비스 계정 사용
    GS_CREDENTIALS = None  # App Engine 환경에서는 자동으로 인증 처리
    
    # GCS 설정
    GS_QUERYSTRING_AUTH = False  # URL 서명 비활성화
    GS_BLOB_CHUNK_SIZE = 5 * 1024 * 1024  # 5MB
    GS_FILE_OVERWRITE = False
    
    # Static 파일 설정
    STATIC_ROOT = 'static'
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    
    # Media 파일 설정
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
else:
    # 로컬 개발 환경
    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR / 'static'
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Media 파일 설정
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Forms 설정
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Security settings
SECURE_SSL_REDIRECT = os.getenv('GAE_ENV', '').startswith('standard')
SESSION_COOKIE_SECURE = os.getenv('GAE_ENV', '').startswith('standard')
CSRF_COOKIE_SECURE = os.getenv('GAE_ENV', '').startswith('standard')
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000  # 1년
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# 로그인/로그아웃 설정
LOGIN_REDIRECT_URL = '/data_analysis/'
LOGOUT_REDIRECT_URL = '/accounts/login/'
